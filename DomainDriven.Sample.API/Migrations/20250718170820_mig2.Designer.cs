// <auto-generated />
using System;
using DomainDriven.Sample.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DomainDriven.Sample.API.Migrations
{
    [DbContext(typeof(CargoDbContext))]
    [Migration("20250718170820_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainDriven.Sample.API.CargoManagement.Domain.Aggregates.CargoDetailInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CargoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CargoDetailInformation");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.CargoManagement.Domain.Aggregates.CargoReadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CargoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CargoReadModel");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.CargoManagement.Domain.Aggregates.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Location.Domain.Aggregates.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Location.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Application.ReadModels.OrderCustomerReadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CustomerReadModel");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Aggregates.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Aggregates.OrderChooseEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrderChooseEmployee");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.CargoManagement.Domain.Aggregates.CargoReadModel", b =>
                {
                    b.OwnsOne("DomainDriven.Sample.API.CargoManagement.Domain.ValueObjects.Status", "Status", b1 =>
                        {
                            b1.Property<int>("CargoReadModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("StatusType")
                                .HasColumnType("integer");

                            b1.HasKey("CargoReadModelId");

                            b1.ToTable("CargoReadModel");

                            b1.WithOwner()
                                .HasForeignKey("CargoReadModelId");
                        });

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Location.Domain.Entities.District", b =>
                {
                    b.HasOne("DomainDriven.Sample.API.Location.Domain.Aggregates.City", null)
                        .WithMany("Districts")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Application.ReadModels.OrderCustomerReadModel", b =>
                {
                    b.OwnsOne("DomainDriven.Sample.API.Order.Application.ReadModels.CustomerReadModelDto", "CustomerReadModel", b1 =>
                        {
                            b1.Property<int>("OrderCustomerReadModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("CurrentCityName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CurrentDetail")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CurrentDistrictName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderCustomerReadModelId");

                            b1.ToTable("CustomerReadModel");

                            b1.WithOwner()
                                .HasForeignKey("OrderCustomerReadModelId");
                        });

                    b.OwnsOne("DomainDriven.Sample.API.Order.Application.ReadModels.LocationReadModel", "TargetLocationModel", b1 =>
                        {
                            b1.Property<int>("OrderCustomerReadModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("CityName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DistrictName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderCustomerReadModelId");

                            b1.ToTable("CustomerReadModel");

                            b1.WithOwner()
                                .HasForeignKey("OrderCustomerReadModelId");
                        });

                    b.Navigation("CustomerReadModel")
                        .IsRequired();

                    b.Navigation("TargetLocationModel")
                        .IsRequired();
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Aggregates.Order", b =>
                {
                    b.OwnsOne("DomainDriven.Sample.API.CargoManagement.Domain.ValueObjects.TargetLocation", "TargetLocation", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<int>("CityId")
                                .HasColumnType("integer");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("DistrictId")
                                .HasColumnType("integer");

                            b1.HasKey("OrderId");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("TargetLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("DomainDriven.Sample.API.Order.Domain.Aggregates.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Location.Domain.Aggregates.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DomainDriven.Sample.API.Order.Domain.Aggregates.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
